// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: proto/messages.proto

package pb_impl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	SendData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	SendStream(ctx context.Context, opts ...grpc.CallOption) (DataService_SendStreamClient, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) SendData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, "/pb_impl.DataService/SendData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) SendStream(ctx context.Context, opts ...grpc.CallOption) (DataService_SendStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataService_ServiceDesc.Streams[0], "/pb_impl.DataService/SendStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServiceSendStreamClient{stream}
	return x, nil
}

type DataService_SendStreamClient interface {
	Send(*DataRequest) error
	CloseAndRecv() (*DataResponse, error)
	grpc.ClientStream
}

type dataServiceSendStreamClient struct {
	grpc.ClientStream
}

func (x *dataServiceSendStreamClient) Send(m *DataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataServiceSendStreamClient) CloseAndRecv() (*DataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations should embed UnimplementedDataServiceServer
// for forward compatibility
type DataServiceServer interface {
	SendData(context.Context, *DataRequest) (*DataResponse, error)
	SendStream(DataService_SendStreamServer) error
}

// UnimplementedDataServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (UnimplementedDataServiceServer) SendData(context.Context, *DataRequest) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendData not implemented")
}
func (UnimplementedDataServiceServer) SendStream(DataService_SendStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SendStream not implemented")
}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_SendData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).SendData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_impl.DataService/SendData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).SendData(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_SendStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServiceServer).SendStream(&dataServiceSendStreamServer{stream})
}

type DataService_SendStreamServer interface {
	SendAndClose(*DataResponse) error
	Recv() (*DataRequest, error)
	grpc.ServerStream
}

type dataServiceSendStreamServer struct {
	grpc.ServerStream
}

func (x *dataServiceSendStreamServer) SendAndClose(m *DataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataServiceSendStreamServer) Recv() (*DataRequest, error) {
	m := new(DataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_impl.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendData",
			Handler:    _DataService_SendData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStream",
			Handler:       _DataService_SendStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/messages.proto",
}

// NoAuthServiceClient is the client API for NoAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoAuthServiceClient interface {
	SayHello(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type noAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoAuthServiceClient(cc grpc.ClientConnInterface) NoAuthServiceClient {
	return &noAuthServiceClient{cc}
}

func (c *noAuthServiceClient) SayHello(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb_impl.NoAuthService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoAuthServiceServer is the server API for NoAuthService service.
// All implementations should embed UnimplementedNoAuthServiceServer
// for forward compatibility
type NoAuthServiceServer interface {
	SayHello(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedNoAuthServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNoAuthServiceServer struct {
}

func (UnimplementedNoAuthServiceServer) SayHello(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}

// UnsafeNoAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoAuthServiceServer will
// result in compilation errors.
type UnsafeNoAuthServiceServer interface {
	mustEmbedUnimplementedNoAuthServiceServer()
}

func RegisterNoAuthServiceServer(s grpc.ServiceRegistrar, srv NoAuthServiceServer) {
	s.RegisterService(&NoAuthService_ServiceDesc, srv)
}

func _NoAuthService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoAuthServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_impl.NoAuthService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoAuthServiceServer).SayHello(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// NoAuthService_ServiceDesc is the grpc.ServiceDesc for NoAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_impl.NoAuthService",
	HandlerType: (*NoAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _NoAuthService_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/messages.proto",
}

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	SayGoodBye(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) SayGoodBye(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb_impl.AuthService/SayGoodBye", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations should embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	SayGoodBye(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedAuthServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) SayGoodBye(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayGoodBye not implemented")
}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_SayGoodBye_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SayGoodBye(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_impl.AuthService/SayGoodBye",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SayGoodBye(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_impl.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayGoodBye",
			Handler:    _AuthService_SayGoodBye_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/messages.proto",
}
